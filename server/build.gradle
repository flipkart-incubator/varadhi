import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "com.flipkart.varadhi.java-application-conventions"
    id "jacoco-report-aggregation"
}

def jacoco_ver = "0.8.10"

dependencies {

    implementation(project(":common"))
    implementation(project(":core"))
    implementation(project(":messaging"))
    implementation(project(":entities"))
    implementation(project(":authz"))

    implementation("org.apache.logging.log4j:log4j-slf4j2-impl")
    implementation("org.apache.logging.log4j:log4j-core")
    implementation("org.apache.commons:commons-lang3")

    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("javax.annotation:javax.annotation-api:$javax_version")

    implementation("io.vertx:vertx-core")
    implementation("io.vertx:vertx-config")
    implementation("io.vertx:vertx-config-yaml")
    implementation("io.vertx:vertx-web")
    implementation("io.vertx:vertx-auth-common")
    implementation("io.vertx:vertx-auth-jwt")
    implementation("io.vertx:vertx-opentelemetry")
    implementation("io.vertx:vertx-opentracing")
    implementation("io.vertx:vertx-micrometer-metrics")

    // TODO: check why still getting warning on class not found.
    if (DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.91.Final:osx-x86_64")
    }

    implementation("io.opentelemetry:opentelemetry-sdk")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
    implementation("io.opentelemetry:opentelemetry-semconv")

    implementation("io.micrometer:micrometer-registry-otlp")
    implementation("io.micrometer:micrometer-registry-jmx")

    //For ZK persistence, curator-framework.
    implementation("org.apache.curator:curator-framework")
    runtimeOnly(project(":pulsar"))

    testImplementation(project(":pulsar"))
    testImplementation(testFixtures(project(":core")))
    testImplementation(testFixtures(project(":authz")))
    testImplementation("org.apache.curator:curator-test")
    testImplementation("io.vertx:vertx-junit5")
    testImplementation("io.vertx:vertx-web-client")

    testE2EImplementation("javax.ws.rs:javax.ws.rs-api")
    testE2EImplementation("org.glassfish.jersey.core:jersey-client")
    testE2EImplementation("org.glassfish.jersey.media:jersey-media-json-jackson")

    testE2ERuntime("org.jacoco:org.jacoco.agent:$jacoco_ver:runtime")


    // jacoco aggregation dependency -- explicit inclusion.
    jacocoAggregation project(":pulsar")

}

task copyJacocoAgent(type: Copy) {
    from configurations.testE2ERuntime.find { it.name.contentEquals("org.jacoco.agent-$jacoco_ver-runtime.jar") }
    into "$buildDir/jacoco"
    rename("org.jacoco.agent-$jacoco_ver-runtime.jar", "org.jacoco.agent-runtime.jar")
}

reporting {
    reports {
        combinedJacocoReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

application {
    mainClass = "com.flipkart.varadhi.Server"
}

