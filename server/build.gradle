import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "com.flipkart.varadhi.java-application-conventions"
    id "jacoco-report-aggregation"
}

dependencies {

    implementation(project(":entities"))
    implementation(project(":common"))
    implementation(project(":core"))
    implementation(project(":producer"))
    implementation(project(":controller"))
    implementation(project(":consumer"))
    implementation(project(":web"))

    implementation(libs.log4j.slf4j2.impl)
    implementation(libs.log4j.core)
    implementation(libs.commons.lang3)
    implementation(libs.failsafe)
    implementation(libs.opentelemetry.sdk)

    implementation(libs.vertx.core)
    implementation(libs.vertx.config)
    implementation(libs.vertx.config.yaml)
    implementation(libs.vertx.web)
    implementation(libs.vertx.auth.jwt)

    implementation(libs.vertx.micrometer.metrics)
    implementation(libs.vertx.opentelemetry)

    // TODO: check why still getting warning on class not found.
    if (DefaultNativePlatform.getCurrentOperatingSystem().isMacOsX()) {
        runtimeOnly(libs.netty.resolver.dns.native.macos)
    }

    //For ZK persistence, curator-framework.
    implementation(libs.curator.framework)

    // For running the varadhi server with pulsar and zk persistence.
    runtimeOnly(project(':pulsar'))
    runtimeOnly(project(':metastore-zk'))

    testImplementation(project(":pulsar"))
    testImplementation(testFixtures(project(":spi")))
    testImplementation(testFixtures(project(":entities")))
    testImplementation(testFixtures(project(":common")))
    testImplementation(libs.curator.test)
    testImplementation(libs.vertx.junit5)
    testImplementation(libs.vertx.web.client)

    // for e2e tests
    testRuntimeOnly(project(':metastore-zk'))

    testE2EImplementation(libs.jersey.client)
    testE2EImplementation(libs.jersey.media.json.jackson)

    testE2ERuntime("org.jacoco:org.jacoco.agent:$jacoco_version:runtime")

    // jacoco aggregation dependency -- explicit inclusion.
    jacocoAggregation project(":pulsar")
}

reporting {
    reports {
        combinedJacocoReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.register('copyMainConfig', Copy.class, copyConfigForModule('main'))
tasks.register('copyTestConfig', Copy.class, copyConfigForModule('test'))

compileTestE2EJava {
    dependsOn tasks.named('copyTestConfig')
}

testE2E {
    useJUnitPlatform()
    jvmArgs '--add-opens', 'java.base/java.net=ALL-UNNAMED'
}

application {
    mainClass = "com.flipkart.varadhi.VaradhiApplication"
}

run {
    dependsOn "copyMainConfig"
    args = ["$buildDir/resources/main/configuration.yml"]
    jvmArgs = [
            "-Dvertx.disableDnsResolver=true",
            "-Dlog4j.configurationFile=$buildDir/resources/main/log4j2.xml"
    ]
}
