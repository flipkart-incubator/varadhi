################################################################
# ZooKeeper stateFullSet
# Reference - https://github.com/apache/pulsar-helm-chart
################################################################
{{- if .Values.zkDeployment.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "varadhi.commonLabels" . | nindent 4 }}
    component: {{ .Values.zkDeployment.name }}
spec:
  serviceName: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}"
  replicas: {{ .Values.zkDeployment.replicaCount }}
  selector:
    matchLabels:
      {{- include "varadhi.commonLabels" . | nindent 6 }}
      component: {{ .Values.zkDeployment.name }}
  updateStrategy:
  {{- toYaml .Values.zkDeployment.updateStrategy | nindent 4 }}
  podManagementPolicy: {{ .Values.zkDeployment.podManagementPolicy }}
  template:
    metadata:
      labels:
        {{- include "varadhi.commonLabels" . | nindent 8 }}
        component: {{ .Values.zkDeployment.name }}
      annotations:
        {{- if .Values.zkDeployment.restartPodsOnConfigMapChange }}
        checksum/config: {{ include (print $.Template.BasePath "/zookeeper-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.zkDeployment.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.zkDeployment.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.zkDeployment.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.zkDeployment.tolerations }}
      tolerations:
      {{- toYaml .Values.zkDeployment.tolerations | nindent 8 }}
      {{- end }}
      affinity:
        {{- if .Values.zkDeployment.affinity.anti_affinity}}
        podAntiAffinity:
          {{ .Values.zkDeployment.affinity.type }}:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - {{ template "varadhi.name" . }}
                    - key: "release"
                      operator: In
                      values:
                        - {{ .Release.Name }}
                    - key: "component"
                      operator: In
                      values:
                        - {{ .Values.zkDeployment.name }}
                topologyKey: {{ .Values.zkDeployment.affinity.anti_affinity_topology_key }}
              {{ if eq .Values.zkDeployment.affinity.type "preferredDuringSchedulingIgnoredDuringExecution" }}
              weight: 100
              {{ end }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.zkDeployment.gracePeriod }}
      {{- if .Values.zkDeployment.podSecurityContext }}
      securityContext:
      {{- toYaml .Values.zkDeployment.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}"
          image: {{ .Values.images.zookeeper.registry }}/{{ .Values.images.zookeeper.repository }}:{{ .Values.images.zookeeper.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          securityContext:
          {{- toYaml .Values.zkDeployment.securityContext | nindent 12 }}
          resources:
          {{- toYaml .Values.zkDeployment.resources | nindent 12 }}
          command: ["sh", "-c", "/scripts/setup.sh"]
          ports:
            - name: http
              containerPort: {{ .Values.zkDeployment.ports.http }}
            - name: client
              containerPort: {{ .Values.zkDeployment.ports.client }}
            - name: follower
              containerPort: {{ .Values.zkDeployment.ports.follower }}
            - name: leader-election
              containerPort: {{ .Values.zkDeployment.ports.leaderElection }}
          env:
            # TODO: why is this env needed for zk?
            - name: ZOOKEEPER_SERVERS
              value: {{ template "varadhi.zookeeper.connectUrl" . }}
            - name: ZOO_LOG4J_PROP
              value: "{{ .Values.zkDeployment.logLevel }},CONSOLE"

          {{- $zkConnectCommand := print "nc -q 1 localhost " .Values.zkDeployment.ports.client -}}
          {{- if .Values.zkDeployment.probe.readiness.enabled }}
          readinessProbe:
            exec:
              command:
                - timeout
                - "{{ .Values.zkDeployment.probe.readiness.timeoutSeconds }}"
                - bash
                - -c
                - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
            initialDelaySeconds: {{ .Values.zkDeployment.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.zkDeployment.probe.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.zkDeployment.probe.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.zkDeployment.probe.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.zkDeployment.probe.liveness.enabled }}
          livenessProbe:
            exec:
              command:
                - timeout
                - "{{ .Values.zkDeployment.probe.liveness.timeoutSeconds }}"
                - bash
                - -c
                - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
            initialDelaySeconds: {{ .Values.zkDeployment.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.zkDeployment.probe.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.zkDeployment.probe.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.zkDeployment.probe.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.zkDeployment.probe.startup.enabled }}
          startupProbe:
            exec:
              command:
                - timeout
                - "{{ .Values.zkDeployment.probe.startup.timeoutSeconds }}"
                - bash
                - -c
                - 'echo ruok | {{ $zkConnectCommand }} | grep imok'
            initialDelaySeconds: {{ .Values.zkDeployment.probe.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.zkDeployment.probe.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.zkDeployment.probe.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.zkDeployment.probe.startup.failureThreshold }}
          {{- end }}
          volumeMounts:
            - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.data.name }}"
              mountPath: /data
            - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.dataLog.name }}"
              mountPath: /datalog
            - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.conf.name }}"
              mountPath: /conf/zoo.cfg
              subPath: zoo.cfg
            - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.scripts.name }}"
              mountPath: /scripts
      volumes:
        {{- if not .Values.zkDeployment.volumes.persistence }}
        - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.data.name }}"
          emptyDir: {}
        - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.dataLog.name }}"
          emptyDir: {}
        {{- end }}
        - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.conf.name }}"
          configMap:
            name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.configMapName }}"
            items:
              - key: zoo.cfg
                path: zoo.cfg
        - name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.scripts.name }}"
          configMap:
            name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.scriptsConfigMapName }}"
            defaultMode: 0555
  {{- if .Values.zkDeployment.volumes.persistence }}
#  TODO::
#  Add storage class yaml as well.
  volumeClaimTemplates:
    {{- $storageClass := "" -}}
    {{- if .Values.zkDeployment.volumes.storageClassName }}
    {{- $storageClass = .Values.zkDeployment.volumes.storageClassName -}}
    {{- else if .Values.zkDeployment.volumes.storageClass }}
    {{- $storageClass =  .Values.zkDeployment.volumes.data.name -}}
    {{- else }}
    {{- $storageClass =  "local-storage" }}
    {{- end }}
    - metadata:
        name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.data.name }}"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.zkDeployment.volumes.data.size }}
        storageClassName: "{{ $storageClass }}"
        {{- with .Values.zkDeployment.volumes.selector }}
        selector:
          {{- toYaml . | nindent 8 }}
        {{- end }}
    - metadata:
        name: "{{ template "varadhi.name" . }}-{{ .Values.zkDeployment.name }}-{{ .Values.zkDeployment.volumes.dataLog.name }}"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.zkDeployment.volumes.dataLog.size }}
        storageClassName: "{{ $storageClass }}"
        {{- with .Values.zkDeployment.volumes.selector }}
        selector:
          {{- toYaml . | nindent 8 }}
        {{- end }}
  {{- end }}
{{- end }}
