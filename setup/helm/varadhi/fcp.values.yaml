# Default values for varadhi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

clusterDomain: cluster.local

deployment:
  name: server
  replicaCount: 3
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  podAnnotations: { }
  podSecurityContext: { }
  terminationGracePeriodSeconds: 5
  dnsSettings:
  probes:
  securityContext:
    runAsNonRoot: true
    runAsUser: 10222
    capabilities:
      add:
        - NET_ADMIN
  resources:
    requests:
      memory: 1G
      cpu: 1
    limits:
      memory: 1G
      cpu: 1
  service:
    annotations:
      elb.fcp/do-not-delete-vip: 'true'
      elb.fcp/mode: http
      elb.fcp/name: varadhi-oss-varadhi-srv-vip
      elb.fcp/scope: REGIONAL
      elb.fcp/frontend-port: '80'
      elb.fcp/backend-port: '18488'
      elb.fcp/health-check-port: '18488'
      elb.fcp/health-check-path: /v1/health-check
      elb.fcp/health-check-timeout: 1s
      elb.fcp/health-check-interval: 5s
      elb.fcp/load-balancing-algorithm: leastconn
      elb.fcp/capacity-scalar: '1'
    frontendPort: 8888

zkDeployment:
  enabled: true
  name: zookeeper
  replicaCount: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  restartPodsOnConfigMapChange: false
  annotations:
  nodeSelector:
  tolerations:
  affinity:
    anti_affinity: false
    anti_affinity_topology_key: kubernetes.io/hostname
    type: requiredDuringSchedulingIgnoredDuringExecution
  gracePeriod: 5
  podSecurityContext:
  ports:
    http: 8000
    client: 2181
    follower: 2888
    leaderElection: 3888
  probe:
    liveness:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 30
    readiness:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 30
    startup:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 30
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      add:
        - NET_ADMIN
  resources:
    requests:
      memory: 1G
      cpu: 1
    limits:
      memory: 1G
      cpu: 1
  volumes:
    # use a persistent volume or emptyDir
    persistence: true
    ## If you already have an existent storage class and want to reuse it, you can specify its name with the option below
    ##
    storageClassName: ssd-jbod-ext4-0
    #
    ## Instead if you want to create a new storage class define it below
    ## If left undefined no storage class will be defined along with PVC
    ##
    storageClass:
      # type: pd-ssd
      # fsType: xfs
      # provisioner: kubernetes.io/gce-pd
    selector: { }
    data:
      name: data
      size: 10Mi
    dataLog:
      name: datalog
      size: 10Mi
    conf:
      name: zk-conf
    scripts:
      name: zk-scripts
  service:
    annotations:
  configMapName: zookeeper
  scriptsConfigMapName: zookeeper-scripts
  logLevel: INFO
  configData:
    tickTime: 2000
    globalOutstandingLimit: 5000
    clientPort: 2181
    maxClientCnxns: 10000
    initLimit: 150
    syncLimit: 15
    skipACL: yes
    purgeInterval: 24
    snapRetainCount: 10
    peerType: "participant"

images:
  pullPolicy: IfNotPresent
  appImage:
    registry: jfrog.fkinternal.com
    repository: varadhi-oss/varadhi
    tag: 0.0.0-6unstable
  zookeeper:
    registry: jfrog.fkinternal.com
    repository: varadhi-oss/zookeeper
    tag: 3.7.0


#############################################################################
#  Config Settings for respective Varadhi components and their dependencies
############################################################################

####################################################
# Varadhi app -- Server (rest api + producer) config
####################################################
varadhi:
  app:
    name: server
    configMapName: server
    restOptions:
      deployedRegion: "default"
      defaultOrg: "default"
      defaultTeam: "public"
      defaultProject: "public"
    producerOptions:
      producerCacheBuilderSpec: ""
      topicCacheBuilderSpec: ""
      metricEnabled: true
    vertxOptions:
      eventLoopPoolSize: 1
      workerPoolSize: 1
      internalBlockingPoolSize: 1
    verticleDeploymentOptions:
      instances: 1
      worker: false
      workerPoolSize: 2
    deliveryOptions:
      timeoutMs: 1000
      tracingPolicy: "PROPAGATE"
    httpServerOptions:
      port: 18488
      alpnVersions: [ "HTTP_1_1", "HTTP_2" ]
      decompressionSupported: false
      useAlpn: true
    authenticationEnabled: false
    authentication:
      jwt:
        jwksUrl: "http://localhost:9090/default/jwks"
        options:
          issuer: "http://localhost:9090/default"
          ignoreExpiration: true
    authorizationEnabled: true
    authorization:
      superUsers: [ "thanos" ]
      providerClassName: "com.flipkart.varadhi.auth.DefaultAuthorizationProvider"
    messagingStackOptions:
      providerClassName: "com.flipkart.varadhi.pulsar.PulsarStackProvider"
    metaStoreOptions:
      providerClassName: "com.flipkart.varadhi.db.ZookeeperProvider"
    featureFlags:
      leanDeployment: false
    member:
      roles: [ "Server", "Controller" ]
      cpuCount: 1
      nicMBps: 100

#############################################
# Varadhi Server logging config
#############################################
logging:
  configMapName: logging
  level: info

#############################################
# Metastore config -- zookeeper
#############################################
metastore:
  configMapName: metastore
  zookeeper:
    connectUrl: "127.0.0.1:2181"
    sessionTimeoutMs: 60000
    connectTimeoutMs: 2000


#############################################
# Messaging stack config - pulsar
#############################################
messaging:
  configMapName: messaging
  pulsar:
    adminOptions:
      serviceHttpUrl: "http://192.168.1.3:8080"
      connectionTimeoutMs: 2000
      readTimeoutMs: 2000
      requestTimeoutMs: 2000
    clientOptions:
      serviceUrl: "http://192.168.1.3:8080"
      keepAliveIntervalSecs: 30                     # Pulsar default (30 secs)
      ioThreads: 2                                  # start with 2, might need further tuning (Pulsar default is 1).
      connectionsPerBroker: 1                       # Pulsar default is 1.
      maxConcurrentLookupRequests: 5000             # Pulsar default is 5000.
      maxLookupRequests: 50000                      # Pulsar default is 50000.
      maxLookupRedirects: 20                        # Pulsar default is 20.
      maxNumberOfRejectedRequestPerConnection: 50   # Pulsar default is 50.
      memoryLimit: 0                                # Pulsar default is no limit (0).
      operationTimeoutMs: 2000                      # keep it low to fail fast. Pulsar default is 30 Secs.
      connectionTimeoutMs: 2000                     # keep it low to fail fast. Pulsar default is 10 Secs.
      lookupTimeoutMs: 10000                        # 5 times operationTimeout
      initialBackoffIntervalMs: 500                 # some random value.
      maxBackoffIntervalMs: 100                     # half of operationTimeoutMs.

#############################################
# Authz provider config
#############################################
authzProvider:
  configMapName: authorization

