import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless'
}

group = projectGroupId
version = "${majorVersion}.${minorVersion}.${patchId}"


repositories {
    mavenCentral()
}

def loadProperties(path) {
    def properties = new Properties()
    def file = file(path)
    if (file.exists()) {
        file.withInputStream { stream ->
            properties.load(stream)
        }
        return properties
    }
    return null
}

ext {
    jacoco_version = "0.8.10"

    copyConfigToDir = { overridesFile, destination ->
        return {
            overrides = loadProperties(overridesFile)
            if (!overrides) {
                return
            }

            from("$rootDir/conf")
            into(destination)
            inputs.file(overridesFile)

            filesMatching("*") {
                expand(overrides)
            }
        }
    }
}

sourceSets {
    testE2E {
        java.srcDir "$projectDir/src/testE2E/java"
        resources.srcDir "$projectDir/src/testE2E/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    testE2EImplementation.extendsFrom testImplementation
    testE2ERuntime.extendsFrom testRuntime
}

dependencies {

    // code generation
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)

    // common apis
    implementation(libs.slf4j.api)
    implementation(libs.guava)
    implementation(libs.opentelemetry.api)
    implementation(libs.jakarta.validation.api)
    implementation(libs.jakarta.annotation.api)

    // common test framework
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.engine)
    testRuntimeOnly(libs.junit.platform.launcher)
    testImplementation(libs.mockito.junit.jupiter)

    testE2EImplementation(libs.junit.jupiter)
    testE2ERuntimeOnly(libs.junit.platform.engine)
    testE2ERuntimeOnly(libs.junit.platform.launcher)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
}

spotless {
    // ratchetFrom 'origin/master'
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
    java {
        removeUnusedImports()
        cleanthat()
        eclipse('4.33').configFile(file("$rootDir/codestyle.xml"))
        endWithNewline()
        targetExclude 'setup/docker/configs/varadhi-auto-generated/**'
        // licenseHeader '/* Licensed under Apache-2.0 (C)$YEAR */'
    }
    json {
        target '**/*.json'
        simple().indentWithSpaces(4)
        targetExclude 'setup/docker/configs/varadhi-auto-generated/**'
    }
}

tasks.register('testE2E', Test) {
    testClassesDirs = sourceSets.testE2E.output.classesDirs
    classpath = sourceSets.testE2E.runtimeClasspath
    outputs.upToDateWhen { false } //this will force testE2E to execute always on target invocation.
}

tasks.register('copyDependencies', Copy) {
    into layout.buildDirectory.dir('dependencies')
    from configurations.runtimeClasspath
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(21)
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}

tasks.withType(JacocoReport).configureEach {
    reports {
        html.required = true
        xml.required = true
    }
    getSourceDirectories().from(sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(sourceSets.main.output)
    getExecutionData().from(fileTree(buildDir).include("/jacoco/*.exec"))
    getExecutionData().from(file("$rootDir/setup/docker/coverage/testE2E.exec"))
}

tasks.withType(Test).configureEach {
    // check if tasks named 'copyConfig' is present in the project
    if (tasks.findByName('copyTestConfig')) {
        dependsOn 'copyTestConfig'
    }

    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Test Sumary: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
