plugins {
    id 'idea'
    id 'java'
}

group = projectGroupId
version = "${projectVersion}.${majorVersion}.${minorVersion}.${patchId}"

repositories {
    mavenCentral()
}

ext {
    lombok_version = "1.18.26"
    slf4j_version = "2.0.7"
    vertx_version = "4.4.1"

    otl_version = "1.25.0"
    micrometer_version = "1.10.6"
}

dependencies {
    constraints {
        implementation("org.slf4j:slf4j-api:$slf4j_version")
        implementation('org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0')
        implementation('org.apache.logging.log4j:log4j-core:2.20.0')

        compileOnly("org.projectlombok:lombok:$lombok_version")
        annotationProcessor("org.projectlombok:lombok:$lombok_version")

        implementation('com.fasterxml.jackson.core:jackson-databind:2.14.2')

        implementation("io.vertx:vertx-core:$vertx_version")
        implementation("io.vertx:vertx-config:${vertx_version}")
        implementation("io.vertx:vertx-config-yaml:${vertx_version}")
        implementation("io.vertx:vertx-web:$vertx_version")
        implementation("io.vertx:vertx-auth-common:$vertx_version")
        implementation("io.vertx:vertx-auth-jwt:$vertx_version")
        implementation("io.vertx:vertx-opentelemetry:$vertx_version")
        implementation("io.vertx:vertx-micrometer-metrics:$vertx_version")
        runtimeOnly('io.netty:netty-resolver-dns-native-macos:4.1.91.Final')


        implementation("io.opentelemetry:opentelemetry-api:$otl_version")
        implementation("io.opentelemetry:opentelemetry-sdk:$otl_version")
        implementation("io.opentelemetry:opentelemetry-exporter-logging:$otl_version")
        implementation("io.opentelemetry:opentelemetry-exporter-otlp:$otl_version")
        implementation("io.opentelemetry:opentelemetry-semconv:$otl_version-alpha")

        implementation("io.micrometer:micrometer-registry-otlp:$micrometer_version")

        // TODO: remove the jmx option altogether. For that need to unify the tracing and metering to use otlp exporters
        //  by default, and have the docker compose setup ready for local setup.
        implementation("io.micrometer:micrometer-registry-jmx:$micrometer_version")

        testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
        testImplementation("io.vertx:vertx-junit5:$vertx_version")
    }

    // code generation
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    // common apis
    implementation("org.slf4j:slf4j-api")
    implementation("io.opentelemetry:opentelemetry-api")

    // common test framework
    testImplementation('org.junit.jupiter:junit-jupiter')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(17)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Test Sumary: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
